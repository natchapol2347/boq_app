#!/usr/bin/env python3
"""
Master Data Admin Interface - Streamlit page for CRUD operations on master data
"""

import streamlit as st
import requests
import pandas as pd
import json
import os
from typing import Dict, Any, List, Optional
from datetime import datetime
import time

# Configuration
def get_backend_url():
    """Get backend URL based on environment"""
    if os.getenv('STREAMLIT_SERVER_HEADLESS') == 'true':
        return "http://boq-backend:5000"
    else:
        return "http://localhost:5000"

BACKEND_URL = get_backend_url()

# Processor types configuration
PROCESSOR_TYPES = {
    'interior': {
        'name': 'Interior (‡∏á‡∏≤‡∏ô‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô)',
        'icon': 'üè†',
        'columns': ['code', 'name', 'material_unit_cost', 'labor_unit_cost', 'total_unit_cost', 'unit'],
        'editable_columns': ['code', 'name', 'material_unit_cost', 'labor_unit_cost', 'unit'],
        'required_columns': ['name']
    },
    'electrical': {
        'name': 'Electrical (‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤)',
        'icon': '‚ö°',
        'columns': ['code', 'name', 'material_unit_cost', 'labor_unit_cost', 'unit'],
        'editable_columns': ['code', 'name', 'material_unit_cost', 'labor_unit_cost', 'unit'],
        'required_columns': ['name']
    },
    'ac': {
        'name': 'Air Conditioning (‡∏á‡∏≤‡∏ô‡πÅ‡∏≠‡∏£‡πå)',
        'icon': '‚ùÑÔ∏è',
        'columns': ['code', 'name', 'material_unit_cost', 'labor_unit_cost', 'unit'],
        'editable_columns': ['code', 'name', 'material_unit_cost', 'labor_unit_cost', 'unit'],
        'required_columns': ['name']
    },
    'fp': {
        'name': 'Fire Protection (‡∏á‡∏≤‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏¥‡∏á)',
        'icon': 'üî•',
        'columns': ['code', 'name', 'material_unit_cost', 'labor_unit_cost', 'unit'],
        'editable_columns': ['code', 'name', 'material_unit_cost', 'labor_unit_cost', 'unit'],
        'required_columns': ['name']
    }
}

class MasterDataAPI:
    """API client for master data CRUD operations"""
    
    def __init__(self, base_url: str = BACKEND_URL):
        self.base_url = base_url
    
    def list_items(self, processor_type: str) -> Dict[str, Any]:
        """List all items for a processor type"""
        try:
            response = requests.get(f"{self.base_url}/api/master-data/list/{processor_type}")
            return response.json()
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def get_item(self, processor_type: str, item_id: str) -> Dict[str, Any]:
        """Get a specific item"""
        try:
            response = requests.get(f"{self.base_url}/api/master-data/get/{processor_type}/{item_id}")
            return response.json()
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def create_item(self, processor_type: str, item_data: Dict[str, Any]) -> Dict[str, Any]:
        """Create a new item"""
        try:
            response = requests.post(f"{self.base_url}/api/master-data/create/{processor_type}", json=item_data)
            return response.json()
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def update_item(self, processor_type: str, item_id: str, item_data: Dict[str, Any]) -> Dict[str, Any]:
        """Update an existing item"""
        try:
            response = requests.put(f"{self.base_url}/api/master-data/update/{processor_type}/{item_id}", json=item_data)
            return response.json()
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def delete_item(self, processor_type: str, item_id: str) -> Dict[str, Any]:
        """Delete an item"""
        try:
            response = requests.delete(f"{self.base_url}/api/master-data/delete/{processor_type}/{item_id}")
            return response.json()
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def bulk_import(self, processor_type: str, file_path: str) -> Dict[str, Any]:
        """Bulk import items from Excel file"""
        try:
            with open(file_path, 'rb') as f:
                files = {'file': f}
                response = requests.post(f"{self.base_url}/api/master-data/bulk-import/{processor_type}", files=files)
                return response.json()
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def export_data(self, processor_type: str) -> Dict[str, Any]:
        """Export master data to Excel"""
        try:
            response = requests.get(f"{self.base_url}/api/master-data/export/{processor_type}")
            return response.json()
        except Exception as e:
            return {'success': False, 'error': str(e)}

def check_backend_connection():
    """Check if backend server is accessible"""
    try:
        response = requests.get(f"{BACKEND_URL}/api/config/inquiry", timeout=2)
        return response.status_code == 200
    except:
        return False

def display_item_list(api: MasterDataAPI, processor_type: str, config: Dict[str, Any]):
    """Display list of items with actions"""
    st.subheader(f"üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å - {config['name']}")
    
    # Load data
    response = api.list_items(processor_type)
    
    if not response.get('success', False):
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {response.get('error', 'Unknown error')}")
        return
    
    items = response.get('items', [])
    
    if not items:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà")
        return
    
    # Display count
    st.write(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:** {len(items)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # Convert to DataFrame for display
    df = pd.DataFrame(items)
    
    # Show only relevant columns
    display_columns = config['columns']
    if 'internal_id' in df.columns:
        df_display = df[['internal_id'] + [col for col in display_columns if col in df.columns]].copy()
    else:
        df_display = df[[col for col in display_columns if col in df.columns]].copy()
    
    # Format cost columns
    cost_columns = ['material_unit_cost', 'labor_unit_cost', 'total_unit_cost']
    for col in cost_columns:
        if col in df_display.columns:
            df_display[col] = df_display[col].apply(lambda x: f"{x:,.2f}" if pd.notna(x) and x != '' else '0.00')
    
    # Display table with selection
    selected_rows = st.dataframe(
        df_display,
        use_container_width=True,
        hide_index=True,
        on_select="rerun",
        selection_mode="single-row"
    )
    
    # Action buttons
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà", type="primary"):
            st.session_state[f'show_create_{processor_type}'] = True
            st.rerun()
    
    with col2:
        if st.button("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç") and selected_rows['selection']['rows']:
            selected_idx = selected_rows['selection']['rows'][0]
            selected_item = items[selected_idx]
            st.session_state[f'edit_item_{processor_type}'] = selected_item
            st.session_state[f'show_edit_{processor_type}'] = True
            st.rerun()
    
    with col3:
        if st.button("üóëÔ∏è ‡∏•‡∏ö", type="secondary") and selected_rows['selection']['rows']:
            selected_idx = selected_rows['selection']['rows'][0]
            selected_item = items[selected_idx]
            st.session_state[f'delete_item_{processor_type}'] = selected_item
            st.session_state[f'show_delete_confirm_{processor_type}'] = True
            st.rerun()
    
    with col4:
        if st.button("üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel"):
            export_response = api.export_data(processor_type)
            if export_response.get('success', False):
                st.success(f"‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß: {export_response['filename']}")
                st.write(f"[‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå]({export_response['download_url']})")
            else:
                st.error(f"‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {export_response.get('error', 'Unknown error')}")

def show_create_form(api: MasterDataAPI, processor_type: str, config: Dict[str, Any]):
    """Show create item form"""
    st.subheader(f"‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà - {config['name']}")
    
    with st.form(f"create_form_{processor_type}"):
        form_data = {}
        
        # Create input fields based on processor type
        col1, col2 = st.columns(2)
        
        with col1:
            form_data['code'] = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", key=f"create_code_{processor_type}")
            form_data['name'] = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ *", key=f"create_name_{processor_type}")
            form_data['unit'] = st.text_input("‡∏´‡∏ô‡πà‡∏ß‡∏¢", key=f"create_unit_{processor_type}")
        
        with col2:
            form_data['material_unit_cost'] = st.number_input(
                "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)", 
                min_value=0.0, 
                value=0.0,
                step=0.01,
                key=f"create_mat_cost_{processor_type}"
            )
            form_data['labor_unit_cost'] = st.number_input(
                "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)", 
                min_value=0.0, 
                value=0.0,
                step=0.01,
                key=f"create_lab_cost_{processor_type}"
            )
        
        # Show total unit cost for interior type
        if processor_type == 'interior':
            total_cost = form_data['material_unit_cost'] + form_data['labor_unit_cost']
            st.info(f"‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢: {total_cost:,.2f} ‡∏ö‡∏≤‡∏ó")
        
        col1, col2, col3 = st.columns([1, 1, 2])
        
        with col1:
            submitted = st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", type="primary")
        
        with col2:
            if st.form_submit_button("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"):
                st.session_state[f'show_create_{processor_type}'] = False
                st.rerun()
        
        if submitted:
            # Validate required fields
            if not form_data['name'].strip():
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            else:
                # Create item
                response = api.create_item(processor_type, form_data)
                
                if response.get('success', False):
                    st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                    st.session_state[f'show_create_{processor_type}'] = False
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {response.get('error', 'Unknown error')}")

def show_edit_form(api: MasterDataAPI, processor_type: str, config: Dict[str, Any], item: Dict[str, Any]):
    """Show edit item form"""
    st.subheader(f"‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ - {config['name']}")
    
    with st.form(f"edit_form_{processor_type}"):
        form_data = {}
        
        col1, col2 = st.columns(2)
        
        with col1:
            form_data['code'] = st.text_input(
                "‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", 
                value=item.get('code', ''),
                key=f"edit_code_{processor_type}"
            )
            form_data['name'] = st.text_input(
                "‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ *", 
                value=item.get('name', ''),
                key=f"edit_name_{processor_type}"
            )
            form_data['unit'] = st.text_input(
                "‡∏´‡∏ô‡πà‡∏ß‡∏¢", 
                value=item.get('unit', ''),
                key=f"edit_unit_{processor_type}"
            )
        
        with col2:
            form_data['material_unit_cost'] = st.number_input(
                "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)", 
                min_value=0.0, 
                value=float(item.get('material_unit_cost', 0)),
                step=0.01,
                key=f"edit_mat_cost_{processor_type}"
            )
            form_data['labor_unit_cost'] = st.number_input(
                "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)", 
                min_value=0.0, 
                value=float(item.get('labor_unit_cost', 0)),
                step=0.01,
                key=f"edit_lab_cost_{processor_type}"
            )
        
        # Show total unit cost for interior type
        if processor_type == 'interior':
            total_cost = form_data['material_unit_cost'] + form_data['labor_unit_cost']
            st.info(f"‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢: {total_cost:,.2f} ‡∏ö‡∏≤‡∏ó")
        
        col1, col2, col3 = st.columns([1, 1, 2])
        
        with col1:
            submitted = st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", type="primary")
        
        with col2:
            if st.form_submit_button("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"):
                st.session_state[f'show_edit_{processor_type}'] = False
                if f'edit_item_{processor_type}' in st.session_state:
                    del st.session_state[f'edit_item_{processor_type}']
                st.rerun()
        
        if submitted:
            # Validate required fields
            if not form_data['name'].strip():
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            else:
                # Update item
                response = api.update_item(processor_type, item['internal_id'], form_data)
                
                if response.get('success', False):
                    st.success("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                    st.session_state[f'show_edit_{processor_type}'] = False
                    if f'edit_item_{processor_type}' in st.session_state:
                        del st.session_state[f'edit_item_{processor_type}']
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error(f"‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {response.get('error', 'Unknown error')}")

def show_delete_confirmation(api: MasterDataAPI, processor_type: str, config: Dict[str, Any], item: Dict[str, Any]):
    """Show delete confirmation dialog"""
    st.subheader(f"üóëÔ∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    st.warning(f"‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
    st.write(f"**‡∏£‡∏´‡∏±‡∏™:** {item.get('code', '‡πÑ‡∏°‡πà‡∏°‡∏µ')}")
    st.write(f"**‡∏ä‡∏∑‡πà‡∏≠:** {item.get('name', '')}")
    st.write(f"**‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ß‡∏±‡∏™‡∏î‡∏∏:** {item.get('material_unit_cost', 0):,.2f} ‡∏ö‡∏≤‡∏ó")
    st.write(f"**‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô:** {item.get('labor_unit_cost', 0):,.2f} ‡∏ö‡∏≤‡∏ó")
    
    col1, col2, col3 = st.columns([1, 1, 2])
    
    with col1:
        if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", type="primary"):
            response = api.delete_item(processor_type, item['internal_id'])
            
            if response.get('success', False):
                st.success("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                st.session_state[f'show_delete_confirm_{processor_type}'] = False
                if f'delete_item_{processor_type}' in st.session_state:
                    del st.session_state[f'delete_item_{processor_type}']
                time.sleep(1)
                st.rerun()
            else:
                st.error(f"‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {response.get('error', 'Unknown error')}")
    
    with col2:
        if st.button("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"):
            st.session_state[f'show_delete_confirm_{processor_type}'] = False
            if f'delete_item_{processor_type}' in st.session_state:
                del st.session_state[f'delete_item_{processor_type}']
            st.rerun()

def show_bulk_import(api: MasterDataAPI, processor_type: str, config: Dict[str, Any]):
    """Show bulk import interface"""
    st.subheader(f"üì§ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Excel - {config['name']}")
    
    st.write("**‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:**")
    
    # Show expected columns
    expected_columns = config['editable_columns']
    column_descriptions = {
        'code': '‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)',
        'name': '‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)',
        'material_unit_cost': '‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)',
        'labor_unit_cost': '‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)',
        'unit': '‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏£.‡∏°., ‡πÄ‡∏°‡∏ï‡∏£, ‡∏ä‡∏¥‡πâ‡∏ô)'
    }
    
    columns_df = pd.DataFrame({
        '‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå': expected_columns,
        '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢': [column_descriptions.get(col, col) for col in expected_columns]
    })
    
    st.dataframe(columns_df, use_container_width=True, hide_index=True)
    
    # File upload
    uploaded_file = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        type=['xlsx', 'xls'],
        help="‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å"
    )
    
    if uploaded_file is not None:
        # Save uploaded file temporarily
        temp_path = f"temp_import_{processor_type}_{int(time.time())}.xlsx"
        with open(temp_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        # Preview data
        try:
            preview_df = pd.read_excel(temp_path, nrows=5)
            st.write("**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å):**")
            st.dataframe(preview_df, use_container_width=True)
            
            col1, col2 = st.columns([1, 3])
            
            with col1:
                if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", type="primary"):
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
                        response = api.bulk_import(processor_type, temp_path)
                    
                    # Clean up temp file
                    if os.path.exists(temp_path):
                        os.remove(temp_path)
                    
                    if response.get('success', False):
                        st.success(f"‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß: {response.get('imported_count', 0)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                        
                        if response.get('errors'):
                            st.warning("‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
                            for error in response['errors'][:10]:  # Show first 10 errors
                                st.write(f"‚Ä¢ {error}")
                        
                        # Refresh the page
                        time.sleep(2)
                        st.rerun()
                    else:
                        st.error(f"‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {response.get('error', 'Unknown error')}")
                        
        except Exception as e:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {str(e)}")
            if os.path.exists(temp_path):
                os.remove(temp_path)

# Page configuration - this must be at the module level, not inside main()
# Add protection to prevent multiple calls
import streamlit as st

if 'admin_page_config_set' not in st.session_state:
    st.set_page_config(
        page_title="üìä BOQ Master Data Admin",
        page_icon="üìä",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    st.session_state.admin_page_config_set = True

# Check backend connection first
if not check_backend_connection():
    st.error("üî¥ **‡πÅ‡∏ö‡πá‡∏Å‡πÄ‡∏≠‡∏ô‡∏î‡πå‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô**")
    st.markdown("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏ö‡πá‡∏Å‡πÄ‡∏≠‡∏ô‡∏î‡πå‡∏Å‡πà‡∏≠‡∏ô: `python backend/main.py`")
    st.stop()

# Header
st.title("üìä BOQ Master Data Admin")
st.markdown("*‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤ BOQ*")
st.success("üü¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡πá‡∏Å‡πÄ‡∏≠‡∏ô‡∏î‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# Initialize API client
api = MasterDataAPI()

# Sidebar - Processor type selection
st.sidebar.header("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

processor_options = []
for proc_type, config in PROCESSOR_TYPES.items():
    processor_options.append(f"{config['icon']} {config['name']}")

selected_processor_display = st.sidebar.selectbox(
    "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å:",
    processor_options,
    index=0
)

# Get actual processor type from display name
selected_processor = None
for proc_type, config in PROCESSOR_TYPES.items():
    if f"{config['icon']} {config['name']}" == selected_processor_display:
        selected_processor = proc_type
        break

if not selected_processor:
    st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    st.stop()

config = PROCESSOR_TYPES[selected_processor]

# Sidebar - Actions
st.sidebar.header("‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")

if st.sidebar.button("üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
    # Clear all form states
    for key in list(st.session_state.keys()):
        if key.startswith(f'show_') and selected_processor in key:
            del st.session_state[key]
    st.rerun()

if st.sidebar.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà"):
    st.session_state[f'show_create_{selected_processor}'] = True
    st.rerun()

if st.sidebar.button("üì§ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≤‡∏Å Excel"):
    st.session_state[f'show_bulk_import_{selected_processor}'] = True
    st.rerun()

# Main content area
st.markdown("---")

# Show different views based on session state
if st.session_state.get(f'show_create_{selected_processor}', False):
    show_create_form(api, selected_processor, config)
    
elif st.session_state.get(f'show_edit_{selected_processor}', False):
    item = st.session_state.get(f'edit_item_{selected_processor}')
    if item:
        show_edit_form(api, selected_processor, config, item)
    else:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
        st.session_state[f'show_edit_{selected_processor}'] = False
        
elif st.session_state.get(f'show_delete_confirm_{selected_processor}', False):
    item = st.session_state.get(f'delete_item_{selected_processor}')
    if item:
        show_delete_confirmation(api, selected_processor, config, item)
    else:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö")
        st.session_state[f'show_delete_confirm_{selected_processor}'] = False
        
elif st.session_state.get(f'show_bulk_import_{selected_processor}', False):
    show_bulk_import(api, selected_processor, config)
    
    if st.button("üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"):
        st.session_state[f'show_bulk_import_{selected_processor}'] = False
        st.rerun()
        
else:
    # Default view - show item list
    display_item_list(api, selected_processor, config)

# Sidebar - Statistics
st.sidebar.markdown("---")
st.sidebar.header("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

try:
    for proc_type, proc_config in PROCESSOR_TYPES.items():
        response = api.list_items(proc_type)
        if response.get('success', False):
            count = response.get('count', 0)
            st.sidebar.metric(
                label=f"{proc_config['icon']} {proc_config['name'].split('(')[0].strip()}",
                value=f"{count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
            )
except:
    st.sidebar.write("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ")

# Footer
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: #666;'>BOQ Master Data Admin v2.0 | Streamlit Admin Interface</div>",
    unsafe_allow_html=True
)#!/usr/bin/env python3
"""
Master Data Admin Interface - Streamlit page for CRUD operations on master data
"""

import streamlit as st
import requests
import pandas as pd
import json
import os
from typing import Dict, Any, List, Optional
from datetime import datetime
import time

# Configuration
def get_backend_url():
    """Get backend URL based on environment"""
    if os.getenv('STREAMLIT_SERVER_HEADLESS') == 'true':
        return "http://boq-backend:5000"
    else:
        return "http://localhost:5000"

BACKEND_URL = get_backend_url()

# Processor types configuration
PROCESSOR_TYPES = {
    'interior': {
        'name': 'Interior (‡∏á‡∏≤‡∏ô‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô)',
        'icon': 'üè†',
        'columns': ['code', 'name', 'material_unit_cost', 'labor_unit_cost', 'total_unit_cost', 'unit'],
        'editable_columns': ['code', 'name', 'material_unit_cost', 'labor_unit_cost', 'unit'],
        'required_columns': ['name']
    },
    'electrical': {
        'name': 'Electrical (‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤)',
        'icon': '‚ö°',
        'columns': ['code', 'name', 'material_unit_cost', 'labor_unit_cost', 'unit'],
        'editable_columns': ['code', 'name', 'material_unit_cost', 'labor_unit_cost', 'unit'],
        'required_columns': ['name']
    },
    'ac': {
        'name': 'Air Conditioning (‡∏á‡∏≤‡∏ô‡πÅ‡∏≠‡∏£‡πå)',
        'icon': '‚ùÑÔ∏è',
        'columns': ['code', 'name', 'material_unit_cost', 'labor_unit_cost', 'unit'],
        'editable_columns': ['code', 'name', 'material_unit_cost', 'labor_unit_cost', 'unit'],
        'required_columns': ['name']
    },
    'fp': {
        'name': 'Fire Protection (‡∏á‡∏≤‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏¥‡∏á)',
        'icon': 'üî•',
        'columns': ['code', 'name', 'material_unit_cost', 'labor_unit_cost', 'unit'],
        'editable_columns': ['code', 'name', 'material_unit_cost', 'labor_unit_cost', 'unit'],
        'required_columns': ['name']
    }
}

class MasterDataAPI:
    """API client for master data CRUD operations"""
    
    def __init__(self, base_url: str = BACKEND_URL):
        self.base_url = base_url
    
    def list_items(self, processor_type: str) -> Dict[str, Any]:
        """List all items for a processor type"""
        try:
            response = requests.get(f"{self.base_url}/api/master-data/list/{processor_type}")
            return response.json()
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def get_item(self, processor_type: str, item_id: str) -> Dict[str, Any]:
        """Get a specific item"""
        try:
            response = requests.get(f"{self.base_url}/api/master-data/get/{processor_type}/{item_id}")
            return response.json()
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def create_item(self, processor_type: str, item_data: Dict[str, Any]) -> Dict[str, Any]:
        """Create a new item"""
        try:
            response = requests.post(f"{self.base_url}/api/master-data/create/{processor_type}", json=item_data)
            return response.json()
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def update_item(self, processor_type: str, item_id: str, item_data: Dict[str, Any]) -> Dict[str, Any]:
        """Update an existing item"""
        try:
            response = requests.put(f"{self.base_url}/api/master-data/update/{processor_type}/{item_id}", json=item_data)
            return response.json()
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def delete_item(self, processor_type: str, item_id: str) -> Dict[str, Any]:
        """Delete an item"""
        try:
            response = requests.delete(f"{self.base_url}/api/master-data/delete/{processor_type}/{item_id}")
            return response.json()
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def bulk_import(self, processor_type: str, file_path: str) -> Dict[str, Any]:
        """Bulk import items from Excel file"""
        try:
            with open(file_path, 'rb') as f:
                files = {'file': f}
                response = requests.post(f"{self.base_url}/api/master-data/bulk-import/{processor_type}", files=files)
                return response.json()
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def export_data(self, processor_type: str) -> Dict[str, Any]:
        """Export master data to Excel"""
        try:
            response = requests.get(f"{self.base_url}/api/master-data/export/{processor_type}")
            return response.json()
        except Exception as e:
            return {'success': False, 'error': str(e)}

def check_backend_connection():
    """Check if backend server is accessible"""
    try:
        response = requests.get(f"{BACKEND_URL}/api/config/inquiry", timeout=2)
        return response.status_code == 200
    except:
        return False

def display_item_list(api: MasterDataAPI, processor_type: str, config: Dict[str, Any]):
    """Display list of items with actions"""
    st.subheader(f"üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å - {config['name']}")
    
    # Load data
    response = api.list_items(processor_type)
    
    if not response.get('success', False):
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {response.get('error', 'Unknown error')}")
        return
    
    items = response.get('items', [])
    
    if not items:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà")
        return
    
    # Display count
    st.write(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:** {len(items)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # Convert to DataFrame for display
    df = pd.DataFrame(items)
    
    # Show only relevant columns
    display_columns = config['columns']
    if 'internal_id' in df.columns:
        df_display = df[['internal_id'] + [col for col in display_columns if col in df.columns]].copy()
    else:
        df_display = df[[col for col in display_columns if col in df.columns]].copy()
    
    # Format cost columns
    cost_columns = ['material_unit_cost', 'labor_unit_cost', 'total_unit_cost']
    for col in cost_columns:
        if col in df_display.columns:
            df_display[col] = df_display[col].apply(lambda x: f"{x:,.2f}" if pd.notna(x) and x != '' else '0.00')
    
    # Display table with selection
    selected_rows = st.dataframe(
        df_display,
        use_container_width=True,
        hide_index=True,
        on_select="rerun",
        selection_mode="single-row"
    )
    
    # Action buttons
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà", type="primary"):
            st.session_state[f'show_create_{processor_type}'] = True
            st.rerun()
    
    with col2:
        if st.button("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç") and selected_rows['selection']['rows']:
            selected_idx = selected_rows['selection']['rows'][0]
            selected_item = items[selected_idx]
            st.session_state[f'edit_item_{processor_type}'] = selected_item
            st.session_state[f'show_edit_{processor_type}'] = True
            st.rerun()
    
    with col3:
        if st.button("üóëÔ∏è ‡∏•‡∏ö", type="secondary") and selected_rows['selection']['rows']:
            selected_idx = selected_rows['selection']['rows'][0]
            selected_item = items[selected_idx]
            st.session_state[f'delete_item_{processor_type}'] = selected_item
            st.session_state[f'show_delete_confirm_{processor_type}'] = True
            st.rerun()
    
    with col4:
        if st.button("üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel"):
            export_response = api.export_data(processor_type)
            if export_response.get('success', False):
                st.success(f"‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß: {export_response['filename']}")
                st.write(f"[‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå]({export_response['download_url']})")
            else:
                st.error(f"‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {export_response.get('error', 'Unknown error')}")

def show_create_form(api: MasterDataAPI, processor_type: str, config: Dict[str, Any]):
    """Show create item form"""
    st.subheader(f"‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà - {config['name']}")
    
    with st.form(f"create_form_{processor_type}"):
        form_data = {}
        
        # Create input fields based on processor type
        col1, col2 = st.columns(2)
        
        with col1:
            form_data['code'] = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", key=f"create_code_{processor_type}")
            form_data['name'] = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ *", key=f"create_name_{processor_type}")
            form_data['unit'] = st.text_input("‡∏´‡∏ô‡πà‡∏ß‡∏¢", key=f"create_unit_{processor_type}")
        
        with col2:
            form_data['material_unit_cost'] = st.number_input(
                "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)", 
                min_value=0.0, 
                value=0.0,
                step=0.01,
                key=f"create_mat_cost_{processor_type}"
            )
            form_data['labor_unit_cost'] = st.number_input(
                "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)", 
                min_value=0.0, 
                value=0.0,
                step=0.01,
                key=f"create_lab_cost_{processor_type}"
            )
        
        # Show total unit cost for interior type
        if processor_type == 'interior':
            total_cost = form_data['material_unit_cost'] + form_data['labor_unit_cost']
            st.info(f"‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢: {total_cost:,.2f} ‡∏ö‡∏≤‡∏ó")
        
        col1, col2, col3 = st.columns([1, 1, 2])
        
        with col1:
            submitted = st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", type="primary")
        
        with col2:
            if st.form_submit_button("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"):
                st.session_state[f'show_create_{processor_type}'] = False
                st.rerun()
        
        if submitted:
            # Validate required fields
            if not form_data['name'].strip():
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            else:
                # Create item
                response = api.create_item(processor_type, form_data)
                
                if response.get('success', False):
                    st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                    st.session_state[f'show_create_{processor_type}'] = False
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {response.get('error', 'Unknown error')}")

def show_edit_form(api: MasterDataAPI, processor_type: str, config: Dict[str, Any], item: Dict[str, Any]):
    """Show edit item form"""
    st.subheader(f"‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ - {config['name']}")
    
    with st.form(f"edit_form_{processor_type}"):
        form_data = {}
        
        col1, col2 = st.columns(2)
        
        with col1:
            form_data['code'] = st.text_input(
                "‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", 
                value=item.get('code', ''),
                key=f"edit_code_{processor_type}"
            )
            form_data['name'] = st.text_input(
                "‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ *", 
                value=item.get('name', ''),
                key=f"edit_name_{processor_type}"
            )
            form_data['unit'] = st.text_input(
                "‡∏´‡∏ô‡πà‡∏ß‡∏¢", 
                value=item.get('unit', ''),
                key=f"edit_unit_{processor_type}"
            )
        
        with col2:
            form_data['material_unit_cost'] = st.number_input(
                "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)", 
                min_value=0.0, 
                value=float(item.get('material_unit_cost', 0)),
                step=0.01,
                key=f"edit_mat_cost_{processor_type}"
            )
            form_data['labor_unit_cost'] = st.number_input(
                "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)", 
                min_value=0.0, 
                value=float(item.get('labor_unit_cost', 0)),
                step=0.01,
                key=f"edit_lab_cost_{processor_type}"
            )
        
        # Show total unit cost for interior type
        if processor_type == 'interior':
            total_cost = form_data['material_unit_cost'] + form_data['labor_unit_cost']
            st.info(f"‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢: {total_cost:,.2f} ‡∏ö‡∏≤‡∏ó")
        
        col1, col2, col3 = st.columns([1, 1, 2])
        
        with col1:
            submitted = st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", type="primary")
        
        with col2:
            if st.form_submit_button("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"):
                st.session_state[f'show_edit_{processor_type}'] = False
                if f'edit_item_{processor_type}' in st.session_state:
                    del st.session_state[f'edit_item_{processor_type}']
                st.rerun()
        
        if submitted:
            # Validate required fields
            if not form_data['name'].strip():
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            else:
                # Update item
                response = api.update_item(processor_type, item['internal_id'], form_data)
                
                if response.get('success', False):
                    st.success("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                    st.session_state[f'show_edit_{processor_type}'] = False
                    if f'edit_item_{processor_type}' in st.session_state:
                        del st.session_state[f'edit_item_{processor_type}']
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error(f"‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {response.get('error', 'Unknown error')}")

def show_delete_confirmation(api: MasterDataAPI, processor_type: str, config: Dict[str, Any], item: Dict[str, Any]):
    """Show delete confirmation dialog"""
    st.subheader(f"üóëÔ∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    st.warning(f"‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
    st.write(f"**‡∏£‡∏´‡∏±‡∏™:** {item.get('code', '‡πÑ‡∏°‡πà‡∏°‡∏µ')}")
    st.write(f"**‡∏ä‡∏∑‡πà‡∏≠:** {item.get('name', '')}")
    st.write(f"**‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ß‡∏±‡∏™‡∏î‡∏∏:** {item.get('material_unit_cost', 0):,.2f} ‡∏ö‡∏≤‡∏ó")
    st.write(f"**‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô:** {item.get('labor_unit_cost', 0):,.2f} ‡∏ö‡∏≤‡∏ó")
    
    col1, col2, col3 = st.columns([1, 1, 2])
    
    with col1:
        if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", type="primary"):
            response = api.delete_item(processor_type, item['internal_id'])
            
            if response.get('success', False):
                st.success("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                st.session_state[f'show_delete_confirm_{processor_type}'] = False
                if f'delete_item_{processor_type}' in st.session_state:
                    del st.session_state[f'delete_item_{processor_type}']
                time.sleep(1)
                st.rerun()
            else:
                st.error(f"‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {response.get('error', 'Unknown error')}")
    
    with col2:
        if st.button("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"):
            st.session_state[f'show_delete_confirm_{processor_type}'] = False
            if f'delete_item_{processor_type}' in st.session_state:
                del st.session_state[f'delete_item_{processor_type}']
            st.rerun()

def show_bulk_import(api: MasterDataAPI, processor_type: str, config: Dict[str, Any]):
    """Show bulk import interface"""
    st.subheader(f"üì§ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Excel - {config['name']}")
    
    st.write("**‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:**")
    
    # Show expected columns
    expected_columns = config['editable_columns']
    column_descriptions = {
        'code': '‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)',
        'name': '‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)',
        'material_unit_cost': '‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)',
        'labor_unit_cost': '‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)',
        'unit': '‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏£.‡∏°., ‡πÄ‡∏°‡∏ï‡∏£, ‡∏ä‡∏¥‡πâ‡∏ô)'
    }
    
    columns_df = pd.DataFrame({
        '‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå': expected_columns,
        '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢': [column_descriptions.get(col, col) for col in expected_columns]
    })
    
    st.dataframe(columns_df, use_container_width=True, hide_index=True)
    
    # File upload
    uploaded_file = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        type=['xlsx', 'xls'],
        help="‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å"
    )
    
    if uploaded_file is not None:
        # Save uploaded file temporarily
        temp_path = f"temp_import_{processor_type}_{int(time.time())}.xlsx"
        with open(temp_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        # Preview data
        try:
            preview_df = pd.read_excel(temp_path, nrows=5)
            st.write("**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å):**")
            st.dataframe(preview_df, use_container_width=True)
            
            col1, col2 = st.columns([1, 3])
            
            with col1:
                if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", type="primary"):
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
                        response = api.bulk_import(processor_type, temp_path)
                    
                    # Clean up temp file
                    if os.path.exists(temp_path):
                        os.remove(temp_path)
                    
                    if response.get('success', False):
                        st.success(f"‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß: {response.get('imported_count', 0)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                        
                        if response.get('errors'):
                            st.warning("‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
                            for error in response['errors'][:10]:  # Show first 10 errors
                                st.write(f"‚Ä¢ {error}")
                        
                        # Refresh the page
                        time.sleep(2)
                        st.rerun()
                    else:
                        st.error(f"‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {response.get('error', 'Unknown error')}")
                        
        except Exception as e:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {str(e)}")
            if os.path.exists(temp_path):
                os.remove(temp_path)

def main():
    """Main Streamlit application for master data admin"""
    
    # Page configuration
    st.set_page_config(
        page_title="üìä BOQ Master Data Admin",
        page_icon="üìä",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Check backend connection first
    if not check_backend_connection():
        st.error("üî¥ **‡πÅ‡∏ö‡πá‡∏Å‡πÄ‡∏≠‡∏ô‡∏î‡πå‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô**")
        st.markdown("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏ö‡πá‡∏Å‡πÄ‡∏≠‡∏ô‡∏î‡πå‡∏Å‡πà‡∏≠‡∏ô: `python backend/main.py`")
        st.stop()
    
    # Header
    st.title("üìä BOQ Master Data Admin")
    st.markdown("*‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤ BOQ*")
    st.success("üü¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡πá‡∏Å‡πÄ‡∏≠‡∏ô‡∏î‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    # Initialize API client
    api = MasterDataAPI()
    
    # Sidebar - Processor type selection
    st.sidebar.header("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    processor_options = []
    for proc_type, config in PROCESSOR_TYPES.items():
        processor_options.append(f"{config['icon']} {config['name']}")
    
    selected_processor_display = st.sidebar.selectbox(
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å:",
        processor_options,
        index=0
    )
    
    # Get actual processor type from display name
    selected_processor = None
    for proc_type, config in PROCESSOR_TYPES.items():
        if f"{config['icon']} {config['name']}" == selected_processor_display:
            selected_processor = proc_type
            break
    
    if not selected_processor:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        st.stop()
    
    config = PROCESSOR_TYPES[selected_processor]
    
    # Sidebar - Actions
    st.sidebar.header("‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")
    
    if st.sidebar.button("üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
        # Clear all form states
        for key in list(st.session_state.keys()):
            if key.startswith(f'show_') and selected_processor in key:
                del st.session_state[key]
        st.rerun()
    
    if st.sidebar.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà"):
        st.session_state[f'show_create_{selected_processor}'] = True
        st.rerun()
    
    if st.sidebar.button("üì§ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≤‡∏Å Excel"):
        st.session_state[f'show_bulk_import_{selected_processor}'] = True
        st.rerun()
    
    # Main content area
    st.markdown("---")
    
    # Show different views based on session state
    if st.session_state.get(f'show_create_{selected_processor}', False):
        show_create_form(api, selected_processor, config)
        
    elif st.session_state.get(f'show_edit_{selected_processor}', False):
        item = st.session_state.get(f'edit_item_{selected_processor}')
        if item:
            show_edit_form(api, selected_processor, config, item)
        else:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
            st.session_state[f'show_edit_{selected_processor}'] = False
            
    elif st.session_state.get(f'show_delete_confirm_{selected_processor}', False):
        item = st.session_state.get(f'delete_item_{selected_processor}')
        if item:
            show_delete_confirmation(api, selected_processor, config, item)
        else:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö")
            st.session_state[f'show_delete_confirm_{selected_processor}'] = False
            
    elif st.session_state.get(f'show_bulk_import_{selected_processor}', False):
        show_bulk_import(api, selected_processor, config)
        
        if st.button("üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"):
            st.session_state[f'show_bulk_import_{selected_processor}'] = False
            st.rerun()
            
    else:
        # Default view - show item list
        display_item_list(api, selected_processor, config)
    
    # Sidebar - Statistics
    st.sidebar.markdown("---")
    st.sidebar.header("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    try:
        for proc_type, proc_config in PROCESSOR_TYPES.items():
            response = api.list_items(proc_type)
            if response.get('success', False):
                count = response.get('count', 0)
                st.sidebar.metric(
                    label=f"{proc_config['icon']} {proc_config['name'].split('(')[0].strip()}",
                    value=f"{count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
                )
    except:
        st.sidebar.write("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ")
    
    # Footer
    st.markdown("---")
    st.markdown(
        "<div style='text-align: center; color: #666;'>BOQ Master Data Admin v2.0 | Streamlit Admin Interface</div>",
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()